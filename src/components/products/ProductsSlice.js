import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchAllBrands, fetchAllCategories, fetchAllProducts,  fetchProductDetails,  filterAllProducts } from "./ProductsApi";

const initialState = {
  products: [],
  categories:[],
  brands:[],
  status: "idle",
  totalItems:0,
  productDetail:null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllProductsAsync = createAsyncThunk(
  "products/fetchAllProducts",
  async () => {
    const response = await fetchAllProducts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchProductDetailsAsync=createAsyncThunk(
  "products/fetchProductDetails",
  async (id)=>{
    const response=await fetchProductDetails(id);
    console.log(id+"slice")
    return response.data
   
  }
)
export const fetchAllCategoriesAsync = createAsyncThunk(
  "categories/fetchAllCategories",
  async () => {
    const response = await fetchAllCategories();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchAllBrandsAsync = createAsyncThunk(
  "brands/fetchAllBrands",
  async () => {
    const response = await fetchAllBrands();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const filterAllProductsAsync = createAsyncThunk(
  "products/filterAllProducts",
async ({filter,sort,pagination}) => {
    console.log(filter)
    const response = await filterAllProducts({filter,sort,pagination});
    // The value we return becomes the `fulfilled` action payload
    return response.responseData;
  }
);
export const productsSlice = createSlice({
  name: "products",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.products = 1;
    },
    decrement: (state) => {
      state.products = 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.products = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.products = action.payload
      })
      .addCase(filterAllProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(filterAllProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products = action.payload.products;
        state.totalItems=action.payload.totalItems
        // console.log(action.payload)
      })
      .addCase(fetchAllCategoriesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllCategoriesAsync.fulfilled, (state, action) => {
        state.status = "idle";
       state.categories=action.payload
        // console.log(action.payload)
      })
      .addCase(fetchAllBrandsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllBrandsAsync.fulfilled, (state, action) => {
        state.status = "idle";
       state.brands=action.payload
      
      })
      .addCase(fetchProductDetailsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProductDetailsAsync.fulfilled, (state, action) => {
        state.status = "idle";
       state.productDetail=action.payload
      })
  },
});

export const { products,totalItems} = productsSlice.actions; //they are reducers but use actions to access the function

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state) => state.products.products
export const selectBrands=(state)=>state.products.brands
export const selectCategories=(state)=>state.products.categories
export const selectProductDetails=(state)=>state.products.productDetail

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };
export default productsSlice.reducer;
